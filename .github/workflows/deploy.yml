name: Deploy NestJS to Linode

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: 'joey8i'
  DOCKER_REPOSITORY: 'paygen-api'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_production:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Linode Production
        env:
          NODE_ENV: ${{ vars.NODE_ENV }}
          PORT: ${{ vars.PORT }}
          API_PREFIX: ${{ vars.API_PREFIX }}
          LOG_LEVEL: ${{ vars.LOG_LEVEL }}
          CORS_ORIGIN: ${{ vars.CORS_ORIGIN }}
          DEFAULT_CURRENCY: ${{ vars.DEFAULT_CURRENCY }}
          PRECISION_DECIMAL_PLACES: ${{ vars.PRECISION_DECIMAL_PLACES }}
          SWAGGER_ENABLED: ${{ vars.SWAGGER_ENABLED }}
          SWAGGER_PATH: ${{ vars.SWAGGER_PATH }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LINODE_HOST }}
          username: ${{ secrets.LINODE_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.LINODE_SSH_PRIVATE_KEY }}
          envs: NODE_ENV,PORT,API_PREFIX,DB_HOST,DB_PORT,DB_USERNAME,DB_PASSWORD,DB_NAME
          script: |
            cd /var/www/paygen.api || mkdir -p /var/www/paygen.api && cd /var/www/paygen.api

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin
            docker pull ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:latest

            docker compose down || true

            # create .env file using environment variables
            cat > .env << EOF
            NODE_ENV=${NODE_ENV}
            PORT=${PORT}
            API_PREFIX=${API_PREFIX}
            DB_HOST=${DB_HOST}
            DB_PORT=${DB_PORT}
            DB_USERNAME=${DB_USERNAME}
            DB_PASSWORD=${DB_PASSWORD}
            DB_NAME=${DB_NAME}
            LOG_LEVEL=${LOG_LEVEL}
            CORS_ORIGIN=${CORS_ORIGIN}
            DEFAULT_CURRENCY=${DEFAULT_CURRENCY}
            PRECISION_DECIMAL_PLACES=${PRECISION_DECIMAL_PLACES}
            SWAGGER_ENABLED=${SWAGGER_ENABLED}
            SWAGGER_PATH=${SWAGGER_PATH}
            EOF

            chmod 600 .env
            if grep -q "=$" .env; then
              echo "ERROR: One or more environment variables are empty!"
              grep "=$" .env | sed 's/=$//'
              exit 1
            fi

            # create docker-compose.yml
            cat > docker-compose.yml << EOF
            version: "3"
            services:
              api:
                image: joey8i/paygen-api:latest
                container_name: paygen-api-container
                restart: always
                ports:
                  - "3222:3222"
                volumes:
                  - ./.env:/app/.env
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3222/api/v1/payslip/health"]
                  interval: 30s
                  timeout: 10s
                  start_period: 20s
                  retries: 3
            EOF

            docker compose up -d
            docker ps | grep paygen-api-container
            echo "Deployment complete!"
